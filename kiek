#!/usr/bin/env python


CONFIGURATION = '~/.kiek'
DIRECTORY = ''
DATABASE = 'kiek.db'
WEB = 'web'
IMAGES = 'images'
TEMPLATES = 'templates'
SITENAME = 'kiek!'
MAX_WIDTH = 640
MAX_HEIGHT = 480
THUMBNAIL_SIZE = 100
FEED_LENGTH = 15
BASE_URL = 'http://localhost/kiek'
PHOTOGRAPHER = 'Joe Test'
EMAIL = 'joe@test.com'
WEBSITE = 'http://www.test.com/'
REMOTE_HOST = 'kiek.test.com'
REMOTE_USER = 'joe'
REMOTE_DIR = 'kiek'

VERSION = '0.1'
DATE = '2007/12/16'

EXIF_TAGS = {'EXIF DateTimeOriginal'  : 'datetime',
             'EXIF Flash'             : 'flash',
             'Image Model'            : 'model',
             'EXIF FNumber'           : 'aperture',
             'EXIF FocalLength'       : 'focal',
             'EXIF ExposureTime'      : 'exposure',
             'Image Make'             : 'make',
             'EXIF ISOSpeedRatings'   : 'iso'}

# CREATE TABLE Image(
#   ID integer primary key,
#   Added_date date,
#   Image_filename varchar(50),
#   Thumbnail_filename varchar(50),
#   Title varchar(100),
#   Comment text
# );


import os
import shutil
import time
import ConfigParser
import tempfile
import uuid
import Image
import EXIF
import subprocess
from Cheetah.Template import Template
from optparse import OptionParser
from pysqlite2 import dbapi2 as sqlite


def main():

    dispatch = {'add'    : add_image,
                'update' : update_image,
                'remove' : remove_image,
                'build'  : build_site,
                'push'   : push_site,
                'pull'   : pull_site}

    config = {'directory'      : DIRECTORY,
              'database'       : DATABASE,
              'web'            : WEB,
              'images'         : IMAGES,
              'templates'      : TEMPLATES,
              'sitename'       : SITENAME,
              'max_width'      : MAX_WIDTH,
              'max_height'     : MAX_HEIGHT,
              'thumbnail_size' : THUMBNAIL_SIZE,
              'feed_length'    : FEED_LENGTH,
              'base_url'       : BASE_URL,
              'photographer'   : PHOTOGRAPHER,
              'email'          : EMAIL,
              'website'        : WEBSITE,
              'remote_host'    : REMOTE_HOST,
              'remote_user'    : REMOTE_USER,
              'remote_dir'     : REMOTE_DIR}

    (action, options) = initialize()

    config['site'] = options['site']

    config_filename = os.path.expanduser(CONFIGURATION)

    config_file = ConfigParser.SafeConfigParser()

    try:
        config_file.read(config_filename)
        sites = config_file.sections()
    except ConfigParser.ParsingError:
        sites = []

    if len(sites) > 0:
        if not config['site']:
            config['site'] = sites[0]
        for key in config:
            try:
                config[key] = config_file.get(config['site'], key)
            except ConfigParser.NoOptionError:
                pass

    dispatch[action](config, options)


def initialize():

    data = {}

    parser = OptionParser(usage = 'usage: %prog add|update|remove|build|pull|push FILE [-t TITLE]',
                          version = 'Kiek %s (%s)' % (VERSION, DATE),
                          description = 'Kiek lets you share images.')

    parser.add_option('-s', '--site', dest='site', metavar='SITE',
                      help='use configuration for SITE')

    parser.add_option('-t', '--title', dest='title', metavar='TITLE',
                      help='use TITLE as image title')

    parser.add_option('-c', '--comment', dest='comment', metavar='COMMENT',
                      help='use COMMENT as image comment')

    (options, args) = parser.parse_args()

    if len(args) < 1:
        parser.error('no action specified')

    data['site'] = options.site

    if args[0] in ['add', 'update', 'remove']:
        if len(args) < 2:
            parser.error('no file specified')
        data['file'] = args[1]
        data['title'] = options.title
        data['comment'] = options.comment
    elif args[0] in ['build', 'pull', 'push']:
        pass
    else:
        print 'action should be one of: add, update, build, pull, push'
        exit(1)

    return (args[0], data)


def pull_site(config, options):
    # pull database and images
    subprocess.Popen([r'rsync',
                      '-e', 'ssh',
                      '-az',
                      config['remote_user'] + '@' + config['remote_host'] + ':' + os.path.join(config['remote_dir'], config['database']),
                      os.path.join(config['directory'], config['database'])]).wait()
    subprocess.Popen([r'rsync',
                      '-e', 'ssh',
                      '-az',
                      '--delete',
                      '--exclude', '.svn',
                      '--exclude', '.htaccess',
                      config['remote_user'] + '@' + config['remote_host'] + ':' + os.path.join(config['remote_dir'], config['web'], config['images'] + '/'),
                      os.path.join(config['directory'], config['web'], config['images'])]).wait()


def push_site(config, options):
    # push entire directory
    subprocess.Popen([r'rsync',
                      '-e', 'ssh',
                      '-az',
                      '--delete',
                      '--exclude', '.svn',
                      '--exclude', config['templates'],
                      config['directory'] + '/',
                      config['remote_user'] + '@' + config['remote_host'] + ':' + config['remote_dir']]).wait()


def build_site(config, options):

    # TODO: clean up old files

    images = []

    connection = sqlite.connect(os.path.join(config['directory'], config['database']))
    cursor = connection.cursor()

    cursor.execute("SELECT Added_date, Image_filename, Thumbnail_filename, Title, Comment"
                   " FROM Image"
                   " ORDER BY Added_date ASC")

    previous = None

    for image in cursor:

        exif = {}

        file = open(os.path.join(config['directory'], config['web'], config['images'], image[1]), 'rb')
        tags = EXIF.process_file(file)

#        for tag in tags.keys():
#            if tag not in ('JPEGThumbnail', 'TIFFThumbnail', 'Filename',
#                           'EXIF MakerNote'):
#                print "Key: %s, value %s" % (tag, tags[tag])
#        exit(1)

        for exif_key in EXIF_TAGS:
            try:
                exif[EXIF_TAGS[exif_key]] = str(tags[exif_key])
            except:
                pass

        if 'datetime' in exif.keys():
            exif['datetime'] = time.strptime(exif['datetime'], '%Y:%m:%d %H:%M:%S')

        environment = {'date'         : time.strptime(image[0], '%Y-%m-%d %H:%M:%S'),
                       'file'         : image[1],
                       'thumbnail'    : image[2],
                       'title'        : image[3],
                       'comment'      : image[4],
                       'exif'         : exif,
                       'sitename'     : config['sitename'],
                       'images_dir'   : config['images'],
                       'base_url'     : config['base_url'],
                       'photographer' : config['photographer'],
                       'email'        : config['email'],
                       'website'      : config['website'],
                       'previous'     : previous,
                       'next'         : None}

        url = generate_url(environment)

        environment['url'] = url
        previous = url
        if len(images) > 0:
            images[len(images)-1]['next'] = url

        images.append(environment)

    for environment in images:

        image = Template(file=os.path.join(config['directory'], config['templates'], 'image.tmpl'), searchList=[environment])

        image_file = open(os.path.join(config['directory'], config['web'], environment['url']), 'w')
        image_file.write(image.respond())
        image_file.close()

    shutil.copy(os.path.join(config['directory'], config['web'], images[len(images)-1]['url']), os.path.join(config['directory'], config['web'], 'latest'))

    environment = {'images'       : images,
                   'sitename'     : config['sitename'],
                   'images_dir'   : config['images'],
                   'base_url'     : config['base_url'],
                   'photographer' : config['photographer'],
                   'email'        : config['email'],
                   'website'      : config['website']}

    index = Template(file=os.path.join(config['directory'], config['templates'], 'index.tmpl'), searchList=[environment])

    index_file = open(os.path.join(config['directory'], config['web'], 'index'), 'w')
    index_file.write(index.respond())
    index_file.close()

    environment['images'] = environment['images'][-int(config['feed_length']):]

    feed = Template(file=os.path.join(config['directory'], config['templates'], 'feed.tmpl'), searchList=[environment])

    feed_file = open(os.path.join(config['directory'], config['web'], 'feed.atom'), 'w')
    feed_file.write(feed.respond())
    feed_file.close()


def generate_url(image):
    return time.strftime('%Y-%m-%d_%H:%M:%S', image['date'])


def remove_image(config, options):

    connection = sqlite.connect(os.path.join(config['directory'], config['database']))
    cursor = connection.cursor()

    cursor.execute("SELECT ID, Image_filename, Thumbnail_filename"
                   " FROM Image WHERE Image_filename = ?",
                   (options['file'],))

    image = cursor.fetchone()

    if not image:
        print 'file is not in database: %s' % options['file']
        exit(1)

    cursor.execute("DELETE FROM Image WHERE ID = ?", (image[0],))

    os.remove(os.path.join(config['directory'], config['web'], config['images'], image[1]))
    os.remove(os.path.join(config['directory'], config['web'], config['images'], image[2]))

    connection.commit()


def update_image(config, options):

    connection = sqlite.connect(os.path.join(config['directory'], config['database']))
    cursor = connection.cursor()

    cursor.execute("SELECT ID, Image_filename, Title, Comment"
                   " FROM Image WHERE Image_filename = ?",
                   (options['file'],))

    image = cursor.fetchone()

    if not image:
        print 'file is not in database: %s' % options['file']
        exit(1)

    if options['title']:
        title = options['title']
    else:
        title = image[2]

    if options['comment']:
        comment = options['comment']
    else:
        comment = image[3]

    cursor.execute("UPDATE Image SET"
                   " Title = ?, Comment = ?"
                   " WHERE ID = ?",
                   (title, comment, image[0]))

    connection.commit()


def add_image(config, options):

    (resized, thumbnail) = process_image(config, options['file'])

    connection = sqlite.connect(os.path.join(config['directory'], config['database']))
    cursor = connection.cursor()

    cursor.execute("INSERT INTO Image"
                   " (Added_date, Image_filename, Thumbnail_filename, Title, Comment)"
                   " VALUES (DATETIME('NOW'), ?, ?, ?, ?)",
                   (resized, thumbnail, options['title'], options['comment']))

    connection.commit()


def process_image(config, filename):

    if not os.path.exists(filename):
        print 'file does not exist: %s' % filename
        exit(1)

    original_filename = tempfile.mktemp()
    shutil.copy(filename, original_filename)

    transform_orientation(original_filename)

    while True:
        file = str(uuid.uuid4())
        if not os.path.exists(os.path.join(config['directory'], config['web'], config['images'], file + '.jpg')):
            break

    resized_filename = file + '.jpg'
    thumbnail_filename = file + '-small.jpg'

    store_resized(original_filename, os.path.join(config['directory'], config['web'], config['images'], resized_filename), config['max_width'], config['max_height'])
    store_thumbnail(original_filename, os.path.join(config['directory'], config['web'], config['images'], thumbnail_filename), config['thumbnail_size'])

    os.remove(original_filename)

    return (resized_filename, thumbnail_filename)


def transform_orientation(filename):
    subprocess.Popen([r'exifautotran', filename]).wait()


def store_resized(original_filename, resized_filename, max_width, max_height):
    subprocess.Popen([r'convert',
                      original_filename,
                      '-resize', str(max_width) + 'x' + str(max_height) + '>',
                      resized_filename]).wait()


def store_thumbnail(original_filename, thumbnail_filename, dimensions):

    original = Image.open(original_filename)
    (width, height) = original.size

    if width > height:
        resize = 'x' + str(dimensions)
    else:
        resize = str(dimensions) + 'x'

    subprocess.Popen([r'convert',
                      original_filename,
                      '-thumbnail', resize,
                      '-gravity', 'center',
                      '-crop', str(dimensions) + 'x' + str(dimensions) + '+0+0',
                      '+repage',
                      thumbnail_filename]).wait()


if __name__ == '__main__':
    main()
